Q1. Matrix Addition

Raju has a square shaped puzzle made up of small square pieces containing numbers on them. He wants to rearrange the puzzle by changing the element of a row into a column element and column element into a row element without altering the shape of the puzzle. Help raju to solve this puzzle. INPUT FORMAT: Enter the row and column of a matrix Enter the matrix OUTPUT FORMAT: Addition of a matrix FUNCTIONAL REQUIREMENTS: int** createArray(int,int); int getElement(int**,int,int); int addMatrix(int**,int**,int**,int,int);

SAMPLE INPUT:

2

2

1

2

3

4

1

2

3

4

SAMPLE OUTPUT:

2  4

6  8

*************************************************************************************************

Q2. Matrix Substraction

Write a C program to perform matrix subtraction. INPUT & OUTPUT FORMAT: First and second inputs correspond to the size of the matrix Third input corresponds to the elements of the first matrix. Fourth input corresponds to the elements of the second matrix. Output corresponds to the matrix obtained after subtraction. FUNCTIONAL REQUIREMENTS: int** createarray(int,int); int getelements(int**,int,int); int subMatrix(int**,int**,int**,int,int);

SAMPLE INPUT:

2

2

1 5

9 4

1 1

1 1

SAMPLE OUTPUT:

The result is :

0 -4

-8 -3

*****************************************************************************************

Q3. Transpose Matrix

Write a program to find the transpose of the given 2D matrix. FUNCTIONAL REQUIREMENTS: int** createarray(int); int getelements(int**,int); int transMatrix(int**,int**,int);

SAMPLE INPUT :

3

1

2

3

4

5

6

7

8

9

SAMPLE OUTPUT:

1 2 3

4 5 6

7 8 9

 

Transpose matrix is :

1 4 7

2 5 8

3 6 9

**********************************************************************************************

Q4. Maximum element in a row

Write a C program to find the element of maximum value in each row. INPUT & OUTPUT FORMAT: The first input corresponds to the number of rows. The second input corresponds to the number of columns. The third input corresponds to the elements of the 2D array. The output corresponds to the maximum element in each row. FUNCTIONAL REQUIREMENTS: int** createArray(int,int); int getElements(int**,int,int); void maxElementRow(int**,int,int);

Input (stdin):

3
3
1 4 9
3 5 1
2 8 5
Output (stdout):

9
5
8

***************************************************************************************************

Q5. Maximum element in a column

Write a C program to find the element of maximum value in each column. INPUT FORMAT: The first input corresponds to the number of rows. The second input corresponds to the number of columns. The third input corresponds to the elements of the 2D array. FUNCTIONAL REQUIREMENTS: int** createArray(int,int); int getElements(int**,int,int); void maxElementCol(int**,int,int);

SAMPLE INPUT :

3

3

1 2 9

8 2 1

4 1 1

SAMPLE OUTPUT:

8

2

9
##########

1

 

#include <stdio.h>

int main()

{

int m, n, c, d, matrix[10][10], transpose[10][10];

scanf("%d%d", &m, &n);

for (c = 0; c < m; c++)

for(d = 0; d < n; d++)

scanf("%d", &matrix[c][d]);

for (c = 0; c < m; c++)

for( d = 0 ; d < n ; d++ )

transpose[d][c] = matrix[c][d];

for (c = 0; c < n; c++) {

for (d = 0; d < m; d++)

printf("%d ", transpose[d][c]+matrix[c][d]);

printf("\n");

}

return 0;

}

 

###############################

2

 

#include <stdio.h>

int main()

{

    int m, n, c, d, first[10][10], second[10][10], sum[10][10];

    scanf("%d%d", &m, &n);

 

    for (c = 0; c < m; c++)

        for (d = 0; d < n; d++)

            scanf("%d", &first[c][d]);

    for (c = 0; c < m; c++)

        for (d = 0; d < n; d++)

            scanf("%d", &second[c][d]);

    printf("The Result is:\n");

    for (c = 0; c < m; c++)

        for (d = 0; d < n; d++)

            sum[c][d] = first[c][d] - second[c][d];

    for (c = 0; c < m; c++)

    {

        for (d = 0; d < n; d++)

            printf("%d ", -sum[c][d]);

        printf("\n");

    }

    return 0;

}

 

####################################

3

 

#include<stdio.h>

int main() {

   int arr[10][10], size, i, j, temp;

   scanf("%d", &size);

   for (i = 0; i < size; i++) {

      for (j = 0; j < size; j++) {

         scanf("%d", &arr[i][j]);

      }

   }

   for (i = 0; i < size; i++) {

      for (j = 0; j < size; j++) {

         printf("%d ", arr[i][j]);

      }

        printf("\n");

   }

   for (i = 1; i < size; i++) {

      for (j = 0; j < i; j++) {

         temp = arr[i][j];

         arr[i][j] = arr[j][i];

         arr[j][i] = temp;

      }

   }

   printf("Transpose matrix is :");

   for (i = 0; i < size; i++) {

     printf("\n");

      for (j = 0; j < size; j++) {

         printf("%d ", arr[i][j]);

      }

   }

  return 0;

}

 

############################

4

 

#include<stdio.h>

#include<malloc.h>

int** create(int m, int n)

{

    int **a, i;

    a= (int **)malloc(m*sizeof(int *));

    for(i=0; i<m; i++)

    {

        *(a+i) = (int *)malloc(n*sizeof(int ));

    }

    return a;

}

void read(int **a, int m, int n)

{

    int i, j;

    for(i=0; i<m; i++)

    {

        for(j=0; j<n; j++)

        {

            scanf("%d", (*(a+i)+j));

        }

    }

}

void findMax(int** a,int m,int n)

{

 int i,j,max;

 for(i=0;i<m;i++)

 {

     max=-9999;

     for(j=0;j<n;j++)

     {

         if(max < (*(*(a+i)+j)))

         {

             max=*(*(a+i)+j);

         }

     }

     printf("%d\n",max);

 }

}

int main()

{

    int **a, m, n;

    scanf("%d",&m);

    scanf("%d",&n);

    a = create(m,n);

    read(a,m,n);

    findMax(a,m,n);

    return 0;

}

 

################################

5

 

#include<stdio.h>

int max(int a[],int n)

{

int i,max;

max=a[0];

for(i=0;i<n;i++)

{

if(a[i]>max)

max=a[i];

}

return max;

}

void main(void)

{

int a[25][25],b[25],m,n,i,j;

scanf("%d%d", &m, &n);

for(i=0;i<m;i++)

{

  for(j=0;j<n;j++)

    scanf("%d",&a[i][j]);

}

for(i=0;i<n;i++)

{

  for(j=0;j<m;j++)

    b[j]=a[j][i];

  printf("%d\n",max(b,m));

}

return 0;

}

 

